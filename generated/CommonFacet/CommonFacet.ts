// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminWithdrawForRole extends ethereum.Event {
  get params(): AdminWithdrawForRole__Params {
    return new AdminWithdrawForRole__Params(this);
  }
}

export class AdminWithdrawForRole__Params {
  _event: AdminWithdrawForRole;

  constructor(event: AdminWithdrawForRole) {
    this._event = event;
  }

  get signerOne(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signerTwo(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class AmountReceived extends ethereum.Event {
  get params(): AmountReceived__Params {
    return new AmountReceived__Params(this);
  }
}

export class AmountReceived__Params {
  _event: AmountReceived;

  constructor(event: AmountReceived) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FiatUserWithdraw extends ethereum.Event {
  get params(): FiatUserWithdraw__Params {
    return new FiatUserWithdraw__Params(this);
  }
}

export class FiatUserWithdraw__Params {
  _event: FiatUserWithdraw;

  constructor(event: FiatUserWithdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CommonFacet extends ethereum.SmartContract {
  static bind(address: Address): CommonFacet {
    return new CommonFacet("CommonFacet", address);
  }

  adminBalance(): BigInt {
    let result = super.call("adminBalance", "adminBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_adminBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("adminBalance", "adminBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  domainSeperator(): Bytes {
    let result = super.call(
      "domainSeperator",
      "domainSeperator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_domainSeperator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeperator",
      "domainSeperator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  userBalance(): BigInt {
    let result = super.call("userBalance", "userBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_userBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("userBalance", "userBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AdminWithdrawCall extends ethereum.Call {
  get inputs(): AdminWithdrawCall__Inputs {
    return new AdminWithdrawCall__Inputs(this);
  }

  get outputs(): AdminWithdrawCall__Outputs {
    return new AdminWithdrawCall__Outputs(this);
  }
}

export class AdminWithdrawCall__Inputs {
  _call: AdminWithdrawCall;

  constructor(call: AdminWithdrawCall) {
    this._call = call;
  }

  get role_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get dataOne_(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get dataTwo_(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get signatureOne_(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get signatureTwo_(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AdminWithdrawCall__Outputs {
  _call: AdminWithdrawCall;

  constructor(call: AdminWithdrawCall) {
    this._call = call;
  }
}

export class InitCommonCall extends ethereum.Call {
  get inputs(): InitCommonCall__Inputs {
    return new InitCommonCall__Inputs(this);
  }

  get outputs(): InitCommonCall__Outputs {
    return new InitCommonCall__Outputs(this);
  }
}

export class InitCommonCall__Inputs {
  _call: InitCommonCall;

  constructor(call: InitCommonCall) {
    this._call = call;
  }

  get version_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get amaFansAddress_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitCommonCall__Outputs {
  _call: InitCommonCall;

  constructor(call: InitCommonCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get data_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get signature_(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
