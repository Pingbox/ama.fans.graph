// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class AmaUserEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("messagesCreated", Value.fromBigInt(BigInt.zero()));
    this.set("postsCreated", Value.fromBigInt(BigInt.zero()));
    this.set("tipsCreated", Value.fromBigInt(BigInt.zero()));
    this.set("postTipsCreated", Value.fromBigInt(BigInt.zero()));
    this.set("responsesCreated", Value.fromBigInt(BigInt.zero()));
    this.set("blockUserCreated", Value.fromBigInt(BigInt.zero()));
    this.set("following", Value.fromBigInt(BigInt.zero()));
    this.set("whitelistUserCreated", Value.fromBigInt(BigInt.zero()));
    this.set("goodResponseCreated", Value.fromBigInt(BigInt.zero()));
    this.set("badResponseCreated", Value.fromBigInt(BigInt.zero()));
    this.set("messagesReceived", Value.fromBigInt(BigInt.zero()));
    this.set("responsesReceived", Value.fromBigInt(BigInt.zero()));
    this.set("blockUserReceived", Value.fromBigInt(BigInt.zero()));
    this.set("goodResponseReceived", Value.fromBigInt(BigInt.zero()));
    this.set("badResponseReceived", Value.fromBigInt(BigInt.zero()));
    this.set("followers", Value.fromBigInt(BigInt.zero()));
    this.set("whitelistUserReceived", Value.fromBigInt(BigInt.zero()));
    this.set("valueSpentOnMessages", Value.fromBigInt(BigInt.zero()));
    this.set("valueSpentOnPosts", Value.fromBigInt(BigInt.zero()));
    this.set("valueSpentOnTips", Value.fromBigInt(BigInt.zero()));
    this.set("valueSpentOnPostTips", Value.fromBigInt(BigInt.zero()));
    this.set("valueReceivedOnResponses", Value.fromBigInt(BigInt.zero()));
    this.set("valueReceivedOnTips", Value.fromBigInt(BigInt.zero()));
    this.set("valueReceivedOnPostTips", Value.fromBigInt(BigInt.zero()));
    this.set("messagesClaimedBack", Value.fromBigInt(BigInt.zero()));
    this.set("tipsClaimedBack", Value.fromBigInt(BigInt.zero()));
    this.set("messagesValueClaimedBack", Value.fromBigInt(BigInt.zero()));
    this.set("tipsValueClaimedBack", Value.fromBigInt(BigInt.zero()));
    this.set("address", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("earningsWithdrawn", Value.fromBigInt(BigInt.zero()));
    this.set("profileTipsSent", Value.fromBigInt(BigInt.zero()));
    this.set("profileTipsValueSent", Value.fromBigInt(BigInt.zero()));
    this.set("profileTipsReceived", Value.fromBigInt(BigInt.zero()));
    this.set("profileTipsValueReceived", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AmaUserEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AmaUserEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AmaUserEntity", id.toString(), this);
    }
  }

  static load(id: string): AmaUserEntity | null {
    return changetype<AmaUserEntity | null>(store.get("AmaUserEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get messagesCreated(): BigInt {
    let value = this.get("messagesCreated");
    return value!.toBigInt();
  }

  set messagesCreated(value: BigInt) {
    this.set("messagesCreated", Value.fromBigInt(value));
  }

  get postsCreated(): BigInt {
    let value = this.get("postsCreated");
    return value!.toBigInt();
  }

  set postsCreated(value: BigInt) {
    this.set("postsCreated", Value.fromBigInt(value));
  }

  get tipsCreated(): BigInt {
    let value = this.get("tipsCreated");
    return value!.toBigInt();
  }

  set tipsCreated(value: BigInt) {
    this.set("tipsCreated", Value.fromBigInt(value));
  }

  get postTipsCreated(): BigInt {
    let value = this.get("postTipsCreated");
    return value!.toBigInt();
  }

  set postTipsCreated(value: BigInt) {
    this.set("postTipsCreated", Value.fromBigInt(value));
  }

  get responsesCreated(): BigInt {
    let value = this.get("responsesCreated");
    return value!.toBigInt();
  }

  set responsesCreated(value: BigInt) {
    this.set("responsesCreated", Value.fromBigInt(value));
  }

  get blockUserCreated(): BigInt {
    let value = this.get("blockUserCreated");
    return value!.toBigInt();
  }

  set blockUserCreated(value: BigInt) {
    this.set("blockUserCreated", Value.fromBigInt(value));
  }

  get following(): BigInt {
    let value = this.get("following");
    return value!.toBigInt();
  }

  set following(value: BigInt) {
    this.set("following", Value.fromBigInt(value));
  }

  get whitelistUserCreated(): BigInt {
    let value = this.get("whitelistUserCreated");
    return value!.toBigInt();
  }

  set whitelistUserCreated(value: BigInt) {
    this.set("whitelistUserCreated", Value.fromBigInt(value));
  }

  get goodResponseCreated(): BigInt {
    let value = this.get("goodResponseCreated");
    return value!.toBigInt();
  }

  set goodResponseCreated(value: BigInt) {
    this.set("goodResponseCreated", Value.fromBigInt(value));
  }

  get badResponseCreated(): BigInt {
    let value = this.get("badResponseCreated");
    return value!.toBigInt();
  }

  set badResponseCreated(value: BigInt) {
    this.set("badResponseCreated", Value.fromBigInt(value));
  }

  get messagesReceived(): BigInt {
    let value = this.get("messagesReceived");
    return value!.toBigInt();
  }

  set messagesReceived(value: BigInt) {
    this.set("messagesReceived", Value.fromBigInt(value));
  }

  get responsesReceived(): BigInt {
    let value = this.get("responsesReceived");
    return value!.toBigInt();
  }

  set responsesReceived(value: BigInt) {
    this.set("responsesReceived", Value.fromBigInt(value));
  }

  get blockUserReceived(): BigInt {
    let value = this.get("blockUserReceived");
    return value!.toBigInt();
  }

  set blockUserReceived(value: BigInt) {
    this.set("blockUserReceived", Value.fromBigInt(value));
  }

  get goodResponseReceived(): BigInt {
    let value = this.get("goodResponseReceived");
    return value!.toBigInt();
  }

  set goodResponseReceived(value: BigInt) {
    this.set("goodResponseReceived", Value.fromBigInt(value));
  }

  get badResponseReceived(): BigInt {
    let value = this.get("badResponseReceived");
    return value!.toBigInt();
  }

  set badResponseReceived(value: BigInt) {
    this.set("badResponseReceived", Value.fromBigInt(value));
  }

  get followers(): BigInt {
    let value = this.get("followers");
    return value!.toBigInt();
  }

  set followers(value: BigInt) {
    this.set("followers", Value.fromBigInt(value));
  }

  get whitelistUserReceived(): BigInt {
    let value = this.get("whitelistUserReceived");
    return value!.toBigInt();
  }

  set whitelistUserReceived(value: BigInt) {
    this.set("whitelistUserReceived", Value.fromBigInt(value));
  }

  get valueSpentOnMessages(): BigInt {
    let value = this.get("valueSpentOnMessages");
    return value!.toBigInt();
  }

  set valueSpentOnMessages(value: BigInt) {
    this.set("valueSpentOnMessages", Value.fromBigInt(value));
  }

  get valueSpentOnPosts(): BigInt {
    let value = this.get("valueSpentOnPosts");
    return value!.toBigInt();
  }

  set valueSpentOnPosts(value: BigInt) {
    this.set("valueSpentOnPosts", Value.fromBigInt(value));
  }

  get valueSpentOnTips(): BigInt {
    let value = this.get("valueSpentOnTips");
    return value!.toBigInt();
  }

  set valueSpentOnTips(value: BigInt) {
    this.set("valueSpentOnTips", Value.fromBigInt(value));
  }

  get valueSpentOnPostTips(): BigInt {
    let value = this.get("valueSpentOnPostTips");
    return value!.toBigInt();
  }

  set valueSpentOnPostTips(value: BigInt) {
    this.set("valueSpentOnPostTips", Value.fromBigInt(value));
  }

  get valueReceivedOnResponses(): BigInt {
    let value = this.get("valueReceivedOnResponses");
    return value!.toBigInt();
  }

  set valueReceivedOnResponses(value: BigInt) {
    this.set("valueReceivedOnResponses", Value.fromBigInt(value));
  }

  get valueReceivedOnTips(): BigInt {
    let value = this.get("valueReceivedOnTips");
    return value!.toBigInt();
  }

  set valueReceivedOnTips(value: BigInt) {
    this.set("valueReceivedOnTips", Value.fromBigInt(value));
  }

  get valueReceivedOnPostTips(): BigInt {
    let value = this.get("valueReceivedOnPostTips");
    return value!.toBigInt();
  }

  set valueReceivedOnPostTips(value: BigInt) {
    this.set("valueReceivedOnPostTips", Value.fromBigInt(value));
  }

  get messagesClaimedBack(): BigInt {
    let value = this.get("messagesClaimedBack");
    return value!.toBigInt();
  }

  set messagesClaimedBack(value: BigInt) {
    this.set("messagesClaimedBack", Value.fromBigInt(value));
  }

  get tipsClaimedBack(): BigInt {
    let value = this.get("tipsClaimedBack");
    return value!.toBigInt();
  }

  set tipsClaimedBack(value: BigInt) {
    this.set("tipsClaimedBack", Value.fromBigInt(value));
  }

  get messagesValueClaimedBack(): BigInt {
    let value = this.get("messagesValueClaimedBack");
    return value!.toBigInt();
  }

  set messagesValueClaimedBack(value: BigInt) {
    this.set("messagesValueClaimedBack", Value.fromBigInt(value));
  }

  get tipsValueClaimedBack(): BigInt {
    let value = this.get("tipsValueClaimedBack");
    return value!.toBigInt();
  }

  set tipsValueClaimedBack(value: BigInt) {
    this.set("tipsValueClaimedBack", Value.fromBigInt(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get twitterId(): BigInt | null {
    let value = this.get("twitterId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set twitterId(value: BigInt | null) {
    if (!value) {
      this.unset("twitterId");
    } else {
      this.set("twitterId", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get earningsWithdrawn(): BigInt {
    let value = this.get("earningsWithdrawn");
    return value!.toBigInt();
  }

  set earningsWithdrawn(value: BigInt) {
    this.set("earningsWithdrawn", Value.fromBigInt(value));
  }

  get twitterUsername(): string | null {
    let value = this.get("twitterUsername");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set twitterUsername(value: string | null) {
    if (!value) {
      this.unset("twitterUsername");
    } else {
      this.set("twitterUsername", Value.fromString(<string>value));
    }
  }

  get profileTipsSent(): BigInt {
    let value = this.get("profileTipsSent");
    return value!.toBigInt();
  }

  set profileTipsSent(value: BigInt) {
    this.set("profileTipsSent", Value.fromBigInt(value));
  }

  get profileTipsValueSent(): BigInt {
    let value = this.get("profileTipsValueSent");
    return value!.toBigInt();
  }

  set profileTipsValueSent(value: BigInt) {
    this.set("profileTipsValueSent", Value.fromBigInt(value));
  }

  get profileTipsReceived(): BigInt {
    let value = this.get("profileTipsReceived");
    return value!.toBigInt();
  }

  set profileTipsReceived(value: BigInt) {
    this.set("profileTipsReceived", Value.fromBigInt(value));
  }

  get profileTipsValueReceived(): BigInt {
    let value = this.get("profileTipsValueReceived");
    return value!.toBigInt();
  }

  set profileTipsValueReceived(value: BigInt) {
    this.set("profileTipsValueReceived", Value.fromBigInt(value));
  }
}

export class DomainRegisteredEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("useraddress", Value.fromString(""));
    this.set("nodeHash", Value.fromBytes(Bytes.empty()));
    this.set("twitterId", Value.fromBigInt(BigInt.zero()));
    this.set("label", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DomainRegisteredEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DomainRegisteredEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DomainRegisteredEntity", id.toString(), this);
    }
  }

  static load(id: string): DomainRegisteredEntity | null {
    return changetype<DomainRegisteredEntity | null>(
      store.get("DomainRegisteredEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get useraddress(): string {
    let value = this.get("useraddress");
    return value!.toString();
  }

  set useraddress(value: string) {
    this.set("useraddress", Value.fromString(value));
  }

  get nodeHash(): Bytes {
    let value = this.get("nodeHash");
    return value!.toBytes();
  }

  set nodeHash(value: Bytes) {
    this.set("nodeHash", Value.fromBytes(value));
  }

  get twitterId(): BigInt {
    let value = this.get("twitterId");
    return value!.toBigInt();
  }

  set twitterId(value: BigInt) {
    this.set("twitterId", Value.fromBigInt(value));
  }

  get twitterUsername(): string | null {
    let value = this.get("twitterUsername");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set twitterUsername(value: string | null) {
    if (!value) {
      this.unset("twitterUsername");
    } else {
      this.set("twitterUsername", Value.fromString(<string>value));
    }
  }

  get label(): string {
    let value = this.get("label");
    return value!.toString();
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class RequestErroredEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("useraddress", Value.fromString(""));
    this.set("data", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RequestErroredEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RequestErroredEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RequestErroredEntity", id.toString(), this);
    }
  }

  static load(id: string): RequestErroredEntity | null {
    return changetype<RequestErroredEntity | null>(
      store.get("RequestErroredEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get useraddress(): string {
    let value = this.get("useraddress");
    return value!.toString();
  }

  set useraddress(value: string) {
    this.set("useraddress", Value.fromString(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }
}

export class RequestFulfilledEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("useraddress", Value.fromString(""));
    this.set("data", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RequestFulfilledEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RequestFulfilledEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RequestFulfilledEntity", id.toString(), this);
    }
  }

  static load(id: string): RequestFulfilledEntity | null {
    return changetype<RequestFulfilledEntity | null>(
      store.get("RequestFulfilledEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get useraddress(): string {
    let value = this.get("useraddress");
    return value!.toString();
  }

  set useraddress(value: string) {
    this.set("useraddress", Value.fromString(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }
}

export class MessageCreatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("recipient", Value.fromString(""));
    this.set("messageId", Value.fromBytes(Bytes.empty()));
    this.set("createdBy", Value.fromString(""));
    this.set("answerLink", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("expiryTime", Value.fromBigInt(BigInt.zero()));
    this.set("link", Value.fromString(""));
    this.set("response", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("tips", Value.fromBigInt(BigInt.zero()));
    this.set("tipsTotalValue", Value.fromBigInt(BigInt.zero()));
    this.set("messageType", Value.fromBigInt(BigInt.zero()));
    this.set("responseType", Value.fromBigInt(BigInt.zero()));
    this.set("responseValue", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MessageCreatedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MessageCreatedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MessageCreatedEntity", id.toString(), this);
    }
  }

  static load(id: string): MessageCreatedEntity | null {
    return changetype<MessageCreatedEntity | null>(
      store.get("MessageCreatedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value!.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get messageId(): Bytes {
    let value = this.get("messageId");
    return value!.toBytes();
  }

  set messageId(value: Bytes) {
    this.set("messageId", Value.fromBytes(value));
  }

  get createdBy(): string {
    let value = this.get("createdBy");
    return value!.toString();
  }

  set createdBy(value: string) {
    this.set("createdBy", Value.fromString(value));
  }

  get answerLink(): string {
    let value = this.get("answerLink");
    return value!.toString();
  }

  set answerLink(value: string) {
    this.set("answerLink", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get expiryTime(): BigInt {
    let value = this.get("expiryTime");
    return value!.toBigInt();
  }

  set expiryTime(value: BigInt) {
    this.set("expiryTime", Value.fromBigInt(value));
  }

  get link(): string {
    let value = this.get("link");
    return value!.toString();
  }

  set link(value: string) {
    this.set("link", Value.fromString(value));
  }

  get answered(): boolean {
    let value = this.get("answered");
    return value!.toBoolean();
  }

  set answered(value: boolean) {
    this.set("answered", Value.fromBoolean(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value!.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get response(): BigInt {
    let value = this.get("response");
    return value!.toBigInt();
  }

  set response(value: BigInt) {
    this.set("response", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get tips(): BigInt {
    let value = this.get("tips");
    return value!.toBigInt();
  }

  set tips(value: BigInt) {
    this.set("tips", Value.fromBigInt(value));
  }

  get tipsTotalValue(): BigInt {
    let value = this.get("tipsTotalValue");
    return value!.toBigInt();
  }

  set tipsTotalValue(value: BigInt) {
    this.set("tipsTotalValue", Value.fromBigInt(value));
  }

  get messageType(): BigInt {
    let value = this.get("messageType");
    return value!.toBigInt();
  }

  set messageType(value: BigInt) {
    this.set("messageType", Value.fromBigInt(value));
  }

  get responseType(): BigInt {
    let value = this.get("responseType");
    return value!.toBigInt();
  }

  set responseType(value: BigInt) {
    this.set("responseType", Value.fromBigInt(value));
  }

  get responseValue(): BigInt {
    let value = this.get("responseValue");
    return value!.toBigInt();
  }

  set responseValue(value: BigInt) {
    this.set("responseValue", Value.fromBigInt(value));
  }
}

export class ResponseCreatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("messageId", Value.fromBytes(Bytes.empty()));
    this.set("owner", Value.fromString(""));
    this.set("creator", Value.fromString(""));
    this.set("responseValue", Value.fromBigInt(BigInt.zero()));
    this.set("answerLink", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ResponseCreatedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ResponseCreatedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ResponseCreatedEntity", id.toString(), this);
    }
  }

  static load(id: string): ResponseCreatedEntity | null {
    return changetype<ResponseCreatedEntity | null>(
      store.get("ResponseCreatedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get messageId(): Bytes {
    let value = this.get("messageId");
    return value!.toBytes();
  }

  set messageId(value: Bytes) {
    this.set("messageId", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get responseValue(): BigInt {
    let value = this.get("responseValue");
    return value!.toBigInt();
  }

  set responseValue(value: BigInt) {
    this.set("responseValue", Value.fromBigInt(value));
  }

  get answerLink(): string {
    let value = this.get("answerLink");
    return value!.toString();
  }

  set answerLink(value: string) {
    this.set("answerLink", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class MessageValueClaimedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("messageId", Value.fromBytes(Bytes.empty()));
    this.set("createdBy", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MessageValueClaimedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MessageValueClaimedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MessageValueClaimedEntity", id.toString(), this);
    }
  }

  static load(id: string): MessageValueClaimedEntity | null {
    return changetype<MessageValueClaimedEntity | null>(
      store.get("MessageValueClaimedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get messageId(): Bytes {
    let value = this.get("messageId");
    return value!.toBytes();
  }

  set messageId(value: Bytes) {
    this.set("messageId", Value.fromBytes(value));
  }

  get createdBy(): string {
    let value = this.get("createdBy");
    return value!.toString();
  }

  set createdBy(value: string) {
    this.set("createdBy", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class TipCreatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("messageId", Value.fromBytes(Bytes.empty()));
    this.set("tipId", Value.fromBytes(Bytes.empty()));
    this.set("createdBy", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TipCreatedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TipCreatedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TipCreatedEntity", id.toString(), this);
    }
  }

  static load(id: string): TipCreatedEntity | null {
    return changetype<TipCreatedEntity | null>(
      store.get("TipCreatedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get messageId(): Bytes {
    let value = this.get("messageId");
    return value!.toBytes();
  }

  set messageId(value: Bytes) {
    this.set("messageId", Value.fromBytes(value));
  }

  get tipId(): Bytes {
    let value = this.get("tipId");
    return value!.toBytes();
  }

  set tipId(value: Bytes) {
    this.set("tipId", Value.fromBytes(value));
  }

  get createdBy(): string {
    let value = this.get("createdBy");
    return value!.toString();
  }

  set createdBy(value: string) {
    this.set("createdBy", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value!.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class TipValueClaimedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("messageId", Value.fromBytes(Bytes.empty()));
    this.set("tipId", Value.fromBytes(Bytes.empty()));
    this.set("createdBy", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TipValueClaimedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TipValueClaimedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TipValueClaimedEntity", id.toString(), this);
    }
  }

  static load(id: string): TipValueClaimedEntity | null {
    return changetype<TipValueClaimedEntity | null>(
      store.get("TipValueClaimedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get messageId(): Bytes {
    let value = this.get("messageId");
    return value!.toBytes();
  }

  set messageId(value: Bytes) {
    this.set("messageId", Value.fromBytes(value));
  }

  get tipId(): Bytes {
    let value = this.get("tipId");
    return value!.toBytes();
  }

  set tipId(value: Bytes) {
    this.set("tipId", Value.fromBytes(value));
  }

  get createdBy(): string {
    let value = this.get("createdBy");
    return value!.toString();
  }

  set createdBy(value: string) {
    this.set("createdBy", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class AmountReceivedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("sender", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AmountReceivedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AmountReceivedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AmountReceivedEntity", id.toString(), this);
    }
  }

  static load(id: string): AmountReceivedEntity | null {
    return changetype<AmountReceivedEntity | null>(
      store.get("AmountReceivedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class TransferEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("sender", Value.fromString(""));
    this.set("recipient", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransferEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransferEntity", id.toString(), this);
    }
  }

  static load(id: string): TransferEntity | null {
    return changetype<TransferEntity | null>(store.get("TransferEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value!.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class BlockedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("sender", Value.fromString(""));
    this.set("receiver", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BlockedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BlockedEntity", id.toString(), this);
    }
  }

  static load(id: string): BlockedEntity | null {
    return changetype<BlockedEntity | null>(store.get("BlockedEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get receiver(): string {
    let value = this.get("receiver");
    return value!.toString();
  }

  set receiver(value: string) {
    this.set("receiver", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class UnBlockedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("sender", Value.fromString(""));
    this.set("receiver", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UnBlockedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UnBlockedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UnBlockedEntity", id.toString(), this);
    }
  }

  static load(id: string): UnBlockedEntity | null {
    return changetype<UnBlockedEntity | null>(store.get("UnBlockedEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get receiver(): string {
    let value = this.get("receiver");
    return value!.toString();
  }

  set receiver(value: string) {
    this.set("receiver", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class WhitelistedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("sender", Value.fromString(""));
    this.set("receiver", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WhitelistedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WhitelistedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WhitelistedEntity", id.toString(), this);
    }
  }

  static load(id: string): WhitelistedEntity | null {
    return changetype<WhitelistedEntity | null>(
      store.get("WhitelistedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get receiver(): string {
    let value = this.get("receiver");
    return value!.toString();
  }

  set receiver(value: string) {
    this.set("receiver", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class UnWhitelistedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("sender", Value.fromString(""));
    this.set("receiver", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UnWhitelistedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UnWhitelistedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UnWhitelistedEntity", id.toString(), this);
    }
  }

  static load(id: string): UnWhitelistedEntity | null {
    return changetype<UnWhitelistedEntity | null>(
      store.get("UnWhitelistedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get receiver(): string {
    let value = this.get("receiver");
    return value!.toString();
  }

  set receiver(value: string) {
    this.set("receiver", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class FollowEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("follower", Value.fromString(""));
    this.set("followed", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FollowEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FollowEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FollowEntity", id.toString(), this);
    }
  }

  static load(id: string): FollowEntity | null {
    return changetype<FollowEntity | null>(store.get("FollowEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get follower(): string {
    let value = this.get("follower");
    return value!.toString();
  }

  set follower(value: string) {
    this.set("follower", Value.fromString(value));
  }

  get followed(): string {
    let value = this.get("followed");
    return value!.toString();
  }

  set followed(value: string) {
    this.set("followed", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class UnFollowEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("unFollower", Value.fromString(""));
    this.set("unFollowed", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UnFollowEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UnFollowEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UnFollowEntity", id.toString(), this);
    }
  }

  static load(id: string): UnFollowEntity | null {
    return changetype<UnFollowEntity | null>(store.get("UnFollowEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get unFollower(): string {
    let value = this.get("unFollower");
    return value!.toString();
  }

  set unFollower(value: string) {
    this.set("unFollower", Value.fromString(value));
  }

  get unFollowed(): string {
    let value = this.get("unFollowed");
    return value!.toString();
  }

  set unFollowed(value: string) {
    this.set("unFollowed", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class WithdrawEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("user", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithdrawEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithdrawEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawEntity", id.toString(), this);
    }
  }

  static load(id: string): WithdrawEntity | null {
    return changetype<WithdrawEntity | null>(store.get("WithdrawEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class ResponseMarkedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("messageId", Value.fromBytes(Bytes.empty()));
    this.set("owner", Value.fromString(""));
    this.set("answerer", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("responseType", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ResponseMarkedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ResponseMarkedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ResponseMarkedEntity", id.toString(), this);
    }
  }

  static load(id: string): ResponseMarkedEntity | null {
    return changetype<ResponseMarkedEntity | null>(
      store.get("ResponseMarkedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get messageId(): Bytes {
    let value = this.get("messageId");
    return value!.toBytes();
  }

  set messageId(value: Bytes) {
    this.set("messageId", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get answerer(): string {
    let value = this.get("answerer");
    return value!.toString();
  }

  set answerer(value: string) {
    this.set("answerer", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get responseType(): BigInt {
    let value = this.get("responseType");
    return value!.toBigInt();
  }

  set responseType(value: BigInt) {
    this.set("responseType", Value.fromBigInt(value));
  }
}

export class PlatformIdentity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("totalValueSpentOnPosts", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueSpentOnMessages", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueSpentOnTips", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueSpentOnPostTips", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueClaimedBackOnTips", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalValueClaimedBackOnMessages",
      Value.fromBigInt(BigInt.zero())
    );
    this.set("totalValueReceivedOnResponses", Value.fromBigInt(BigInt.zero()));
    this.set("totalPosts", Value.fromBigInt(BigInt.zero()));
    this.set("totalMessagesSent", Value.fromBigInt(BigInt.zero()));
    this.set("totalMessagesClaimedBack", Value.fromBigInt(BigInt.zero()));
    this.set("totalTipsClaimedBack", Value.fromBigInt(BigInt.zero()));
    this.set("totalResponseCreated", Value.fromBigInt(BigInt.zero()));
    this.set("totalTipsMade", Value.fromBigInt(BigInt.zero()));
    this.set("totalPostTips", Value.fromBigInt(BigInt.zero()));
    this.set("totalUsers", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PlatformIdentity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PlatformIdentity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PlatformIdentity", id.toString(), this);
    }
  }

  static load(id: string): PlatformIdentity | null {
    return changetype<PlatformIdentity | null>(
      store.get("PlatformIdentity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get totalValueSpentOnPosts(): BigInt {
    let value = this.get("totalValueSpentOnPosts");
    return value!.toBigInt();
  }

  set totalValueSpentOnPosts(value: BigInt) {
    this.set("totalValueSpentOnPosts", Value.fromBigInt(value));
  }

  get totalValueSpentOnMessages(): BigInt {
    let value = this.get("totalValueSpentOnMessages");
    return value!.toBigInt();
  }

  set totalValueSpentOnMessages(value: BigInt) {
    this.set("totalValueSpentOnMessages", Value.fromBigInt(value));
  }

  get totalValueSpentOnTips(): BigInt {
    let value = this.get("totalValueSpentOnTips");
    return value!.toBigInt();
  }

  set totalValueSpentOnTips(value: BigInt) {
    this.set("totalValueSpentOnTips", Value.fromBigInt(value));
  }

  get totalValueSpentOnPostTips(): BigInt {
    let value = this.get("totalValueSpentOnPostTips");
    return value!.toBigInt();
  }

  set totalValueSpentOnPostTips(value: BigInt) {
    this.set("totalValueSpentOnPostTips", Value.fromBigInt(value));
  }

  get totalValueClaimedBackOnTips(): BigInt {
    let value = this.get("totalValueClaimedBackOnTips");
    return value!.toBigInt();
  }

  set totalValueClaimedBackOnTips(value: BigInt) {
    this.set("totalValueClaimedBackOnTips", Value.fromBigInt(value));
  }

  get totalValueClaimedBackOnMessages(): BigInt {
    let value = this.get("totalValueClaimedBackOnMessages");
    return value!.toBigInt();
  }

  set totalValueClaimedBackOnMessages(value: BigInt) {
    this.set("totalValueClaimedBackOnMessages", Value.fromBigInt(value));
  }

  get totalValueReceivedOnResponses(): BigInt {
    let value = this.get("totalValueReceivedOnResponses");
    return value!.toBigInt();
  }

  set totalValueReceivedOnResponses(value: BigInt) {
    this.set("totalValueReceivedOnResponses", Value.fromBigInt(value));
  }

  get totalPosts(): BigInt {
    let value = this.get("totalPosts");
    return value!.toBigInt();
  }

  set totalPosts(value: BigInt) {
    this.set("totalPosts", Value.fromBigInt(value));
  }

  get totalMessagesSent(): BigInt {
    let value = this.get("totalMessagesSent");
    return value!.toBigInt();
  }

  set totalMessagesSent(value: BigInt) {
    this.set("totalMessagesSent", Value.fromBigInt(value));
  }

  get totalMessagesClaimedBack(): BigInt {
    let value = this.get("totalMessagesClaimedBack");
    return value!.toBigInt();
  }

  set totalMessagesClaimedBack(value: BigInt) {
    this.set("totalMessagesClaimedBack", Value.fromBigInt(value));
  }

  get totalTipsClaimedBack(): BigInt {
    let value = this.get("totalTipsClaimedBack");
    return value!.toBigInt();
  }

  set totalTipsClaimedBack(value: BigInt) {
    this.set("totalTipsClaimedBack", Value.fromBigInt(value));
  }

  get totalResponseCreated(): BigInt {
    let value = this.get("totalResponseCreated");
    return value!.toBigInt();
  }

  set totalResponseCreated(value: BigInt) {
    this.set("totalResponseCreated", Value.fromBigInt(value));
  }

  get totalTipsMade(): BigInt {
    let value = this.get("totalTipsMade");
    return value!.toBigInt();
  }

  set totalTipsMade(value: BigInt) {
    this.set("totalTipsMade", Value.fromBigInt(value));
  }

  get totalPostTips(): BigInt {
    let value = this.get("totalPostTips");
    return value!.toBigInt();
  }

  set totalPostTips(value: BigInt) {
    this.set("totalPostTips", Value.fromBigInt(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    return value!.toBigInt();
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }
}

export class PostEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("postId", Value.fromBytes(Bytes.empty()));
    this.set("createdBy", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("link", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("tips", Value.fromBigInt(BigInt.zero()));
    this.set("tipsTotalValue", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PostEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PostEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PostEntity", id.toString(), this);
    }
  }

  static load(id: string): PostEntity | null {
    return changetype<PostEntity | null>(store.get("PostEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get postId(): Bytes {
    let value = this.get("postId");
    return value!.toBytes();
  }

  set postId(value: Bytes) {
    this.set("postId", Value.fromBytes(value));
  }

  get createdBy(): string {
    let value = this.get("createdBy");
    return value!.toString();
  }

  set createdBy(value: string) {
    this.set("createdBy", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get link(): string {
    let value = this.get("link");
    return value!.toString();
  }

  set link(value: string) {
    this.set("link", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get tips(): BigInt {
    let value = this.get("tips");
    return value!.toBigInt();
  }

  set tips(value: BigInt) {
    this.set("tips", Value.fromBigInt(value));
  }

  get tipsTotalValue(): BigInt {
    let value = this.get("tipsTotalValue");
    return value!.toBigInt();
  }

  set tipsTotalValue(value: BigInt) {
    this.set("tipsTotalValue", Value.fromBigInt(value));
  }
}

export class PostTipEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("postId", Value.fromBytes(Bytes.empty()));
    this.set("postTipId", Value.fromBytes(Bytes.empty()));
    this.set("createdBy", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PostTipEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PostTipEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PostTipEntity", id.toString(), this);
    }
  }

  static load(id: string): PostTipEntity | null {
    return changetype<PostTipEntity | null>(store.get("PostTipEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get postId(): Bytes {
    let value = this.get("postId");
    return value!.toBytes();
  }

  set postId(value: Bytes) {
    this.set("postId", Value.fromBytes(value));
  }

  get postTipId(): Bytes {
    let value = this.get("postTipId");
    return value!.toBytes();
  }

  set postTipId(value: Bytes) {
    this.set("postTipId", Value.fromBytes(value));
  }

  get createdBy(): string {
    let value = this.get("createdBy");
    return value!.toString();
  }

  set createdBy(value: string) {
    this.set("createdBy", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}
