// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class AmaUserEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AmaUserEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AmaUserEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AmaUserEntity", id.toString(), this);
    }
  }

  static load(id: string): AmaUserEntity | null {
    return changetype<AmaUserEntity | null>(store.get("AmaUserEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questionsCreated(): BigInt | null {
    let value = this.get("questionsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set questionsCreated(value: BigInt | null) {
    if (!value) {
      this.unset("questionsCreated");
    } else {
      this.set("questionsCreated", Value.fromBigInt(<BigInt>value));
    }
  }

  get tipsCreated(): BigInt | null {
    let value = this.get("tipsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tipsCreated(value: BigInt | null) {
    if (!value) {
      this.unset("tipsCreated");
    } else {
      this.set("tipsCreated", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockuserCreated(): BigInt | null {
    let value = this.get("blockuserCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockuserCreated(value: BigInt | null) {
    if (!value) {
      this.unset("blockuserCreated");
    } else {
      this.set("blockuserCreated", Value.fromBigInt(<BigInt>value));
    }
  }

  get answersCreated(): BigInt | null {
    let value = this.get("answersCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set answersCreated(value: BigInt | null) {
    if (!value) {
      this.unset("answersCreated");
    } else {
      this.set("answersCreated", Value.fromBigInt(<BigInt>value));
    }
  }

  get questionsReceived(): BigInt | null {
    let value = this.get("questionsReceived");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set questionsReceived(value: BigInt | null) {
    if (!value) {
      this.unset("questionsReceived");
    } else {
      this.set("questionsReceived", Value.fromBigInt(<BigInt>value));
    }
  }

  get answersReceived(): BigInt | null {
    let value = this.get("answersReceived");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set answersReceived(value: BigInt | null) {
    if (!value) {
      this.unset("answersReceived");
    } else {
      this.set("answersReceived", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockUserReceived(): BigInt | null {
    let value = this.get("blockUserReceived");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockUserReceived(value: BigInt | null) {
    if (!value) {
      this.unset("blockUserReceived");
    } else {
      this.set("blockUserReceived", Value.fromBigInt(<BigInt>value));
    }
  }

  get valueSpentOnQuestions(): BigInt | null {
    let value = this.get("valueSpentOnQuestions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueSpentOnQuestions(value: BigInt | null) {
    if (!value) {
      this.unset("valueSpentOnQuestions");
    } else {
      this.set("valueSpentOnQuestions", Value.fromBigInt(<BigInt>value));
    }
  }

  get valueSpentOnTips(): BigInt | null {
    let value = this.get("valueSpentOnTips");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueSpentOnTips(value: BigInt | null) {
    if (!value) {
      this.unset("valueSpentOnTips");
    } else {
      this.set("valueSpentOnTips", Value.fromBigInt(<BigInt>value));
    }
  }

  get valueReceivedOnQuestions(): BigInt | null {
    let value = this.get("valueReceivedOnQuestions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueReceivedOnQuestions(value: BigInt | null) {
    if (!value) {
      this.unset("valueReceivedOnQuestions");
    } else {
      this.set("valueReceivedOnQuestions", Value.fromBigInt(<BigInt>value));
    }
  }

  get valueReceivedOnAnswers(): BigInt | null {
    let value = this.get("valueReceivedOnAnswers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueReceivedOnAnswers(value: BigInt | null) {
    if (!value) {
      this.unset("valueReceivedOnAnswers");
    } else {
      this.set("valueReceivedOnAnswers", Value.fromBigInt(<BigInt>value));
    }
  }

  get valueReceivedOnTips(): BigInt | null {
    let value = this.get("valueReceivedOnTips");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueReceivedOnTips(value: BigInt | null) {
    if (!value) {
      this.unset("valueReceivedOnTips");
    } else {
      this.set("valueReceivedOnTips", Value.fromBigInt(<BigInt>value));
    }
  }

  get questionsClaimedBack(): BigInt | null {
    let value = this.get("questionsClaimedBack");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set questionsClaimedBack(value: BigInt | null) {
    if (!value) {
      this.unset("questionsClaimedBack");
    } else {
      this.set("questionsClaimedBack", Value.fromBigInt(<BigInt>value));
    }
  }

  get tipsClaimedBack(): BigInt | null {
    let value = this.get("tipsClaimedBack");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tipsClaimedBack(value: BigInt | null) {
    if (!value) {
      this.unset("tipsClaimedBack");
    } else {
      this.set("tipsClaimedBack", Value.fromBigInt(<BigInt>value));
    }
  }

  get questionsValueClaimedBack(): BigInt | null {
    let value = this.get("questionsValueClaimedBack");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set questionsValueClaimedBack(value: BigInt | null) {
    if (!value) {
      this.unset("questionsValueClaimedBack");
    } else {
      this.set("questionsValueClaimedBack", Value.fromBigInt(<BigInt>value));
    }
  }

  get tipsValueClaimedBack(): BigInt | null {
    let value = this.get("tipsValueClaimedBack");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tipsValueClaimedBack(value: BigInt | null) {
    if (!value) {
      this.unset("tipsValueClaimedBack");
    } else {
      this.set("tipsValueClaimedBack", Value.fromBigInt(<BigInt>value));
    }
  }

  get madeBlock(): BigInt | null {
    let value = this.get("madeBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set madeBlock(value: BigInt | null) {
    if (!value) {
      this.unset("madeBlock");
    } else {
      this.set("madeBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get receivedBlock(): BigInt | null {
    let value = this.get("receivedBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set receivedBlock(value: BigInt | null) {
    if (!value) {
      this.unset("receivedBlock");
    } else {
      this.set("receivedBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get twitterId(): BigInt | null {
    let value = this.get("twitterId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set twitterId(value: BigInt | null) {
    if (!value) {
      this.unset("twitterId");
    } else {
      this.set("twitterId", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get twitterUsername(): string | null {
    let value = this.get("twitterUsername");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set twitterUsername(value: string | null) {
    if (!value) {
      this.unset("twitterUsername");
    } else {
      this.set("twitterUsername", Value.fromString(<string>value));
    }
  }
}

export class DomainRegisteredEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("useraddress", Value.fromString(""));
    this.set("nodeHash", Value.fromBytes(Bytes.empty()));
    this.set("twitterId", Value.fromBigInt(BigInt.zero()));
    this.set("label", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DomainRegisteredEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DomainRegisteredEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DomainRegisteredEntity", id.toString(), this);
    }
  }

  static load(id: string): DomainRegisteredEntity | null {
    return changetype<DomainRegisteredEntity | null>(
      store.get("DomainRegisteredEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get useraddress(): string {
    let value = this.get("useraddress");
    return value!.toString();
  }

  set useraddress(value: string) {
    this.set("useraddress", Value.fromString(value));
  }

  get nodeHash(): Bytes {
    let value = this.get("nodeHash");
    return value!.toBytes();
  }

  set nodeHash(value: Bytes) {
    this.set("nodeHash", Value.fromBytes(value));
  }

  get twitterId(): BigInt {
    let value = this.get("twitterId");
    return value!.toBigInt();
  }

  set twitterId(value: BigInt) {
    this.set("twitterId", Value.fromBigInt(value));
  }

  get twitterUsername(): string | null {
    let value = this.get("twitterUsername");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set twitterUsername(value: string | null) {
    if (!value) {
      this.unset("twitterUsername");
    } else {
      this.set("twitterUsername", Value.fromString(<string>value));
    }
  }

  get label(): string {
    let value = this.get("label");
    return value!.toString();
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class RequestErroredEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("useraddress", Value.fromString(""));
    this.set("data", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RequestErroredEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RequestErroredEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RequestErroredEntity", id.toString(), this);
    }
  }

  static load(id: string): RequestErroredEntity | null {
    return changetype<RequestErroredEntity | null>(
      store.get("RequestErroredEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get useraddress(): string {
    let value = this.get("useraddress");
    return value!.toString();
  }

  set useraddress(value: string) {
    this.set("useraddress", Value.fromString(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }
}

export class RequestFulfilledEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("useraddress", Value.fromString(""));
    this.set("data", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RequestFulfilledEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RequestFulfilledEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RequestFulfilledEntity", id.toString(), this);
    }
  }

  static load(id: string): RequestFulfilledEntity | null {
    return changetype<RequestFulfilledEntity | null>(
      store.get("RequestFulfilledEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get useraddress(): string {
    let value = this.get("useraddress");
    return value!.toString();
  }

  set useraddress(value: string) {
    this.set("useraddress", Value.fromString(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }
}

export class QuestionCreatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("recipient", Value.fromString(""));
    this.set("questionId", Value.fromBytes(Bytes.empty()));
    this.set("createdBy", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("expiryTime", Value.fromBigInt(BigInt.zero()));
    this.set("link", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("tips", Value.fromBigInt(BigInt.zero()));
    this.set("tipsTotalValue", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save QuestionCreatedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestionCreatedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestionCreatedEntity", id.toString(), this);
    }
  }

  static load(id: string): QuestionCreatedEntity | null {
    return changetype<QuestionCreatedEntity | null>(
      store.get("QuestionCreatedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value!.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get questionId(): Bytes {
    let value = this.get("questionId");
    return value!.toBytes();
  }

  set questionId(value: Bytes) {
    this.set("questionId", Value.fromBytes(value));
  }

  get createdBy(): string {
    let value = this.get("createdBy");
    return value!.toString();
  }

  set createdBy(value: string) {
    this.set("createdBy", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get expiryTime(): BigInt {
    let value = this.get("expiryTime");
    return value!.toBigInt();
  }

  set expiryTime(value: BigInt) {
    this.set("expiryTime", Value.fromBigInt(value));
  }

  get link(): string {
    let value = this.get("link");
    return value!.toString();
  }

  set link(value: string) {
    this.set("link", Value.fromString(value));
  }

  get answered(): boolean {
    let value = this.get("answered");
    return value!.toBoolean();
  }

  set answered(value: boolean) {
    this.set("answered", Value.fromBoolean(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value!.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get tips(): BigInt {
    let value = this.get("tips");
    return value!.toBigInt();
  }

  set tips(value: BigInt) {
    this.set("tips", Value.fromBigInt(value));
  }

  get tipsTotalValue(): BigInt {
    let value = this.get("tipsTotalValue");
    return value!.toBigInt();
  }

  set tipsTotalValue(value: BigInt) {
    this.set("tipsTotalValue", Value.fromBigInt(value));
  }
}

export class QuestionAnsweredEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("questionId", Value.fromBytes(Bytes.empty()));
    this.set("owner", Value.fromString(""));
    this.set("creator", Value.fromString(""));
    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
    this.set("answerLink", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save QuestionAnsweredEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestionAnsweredEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestionAnsweredEntity", id.toString(), this);
    }
  }

  static load(id: string): QuestionAnsweredEntity | null {
    return changetype<QuestionAnsweredEntity | null>(
      store.get("QuestionAnsweredEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questionId(): Bytes {
    let value = this.get("questionId");
    return value!.toBytes();
  }

  set questionId(value: Bytes) {
    this.set("questionId", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get answerLink(): string {
    let value = this.get("answerLink");
    return value!.toString();
  }

  set answerLink(value: string) {
    this.set("answerLink", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class QuestionValueClaimedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("questionId", Value.fromBytes(Bytes.empty()));
    this.set("createdBy", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save QuestionValueClaimedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestionValueClaimedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestionValueClaimedEntity", id.toString(), this);
    }
  }

  static load(id: string): QuestionValueClaimedEntity | null {
    return changetype<QuestionValueClaimedEntity | null>(
      store.get("QuestionValueClaimedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questionId(): Bytes {
    let value = this.get("questionId");
    return value!.toBytes();
  }

  set questionId(value: Bytes) {
    this.set("questionId", Value.fromBytes(value));
  }

  get createdBy(): string {
    let value = this.get("createdBy");
    return value!.toString();
  }

  set createdBy(value: string) {
    this.set("createdBy", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class TipCreatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("questionId", Value.fromBytes(Bytes.empty()));
    this.set("tipId", Value.fromBytes(Bytes.empty()));
    this.set("createdBy", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TipCreatedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TipCreatedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TipCreatedEntity", id.toString(), this);
    }
  }

  static load(id: string): TipCreatedEntity | null {
    return changetype<TipCreatedEntity | null>(
      store.get("TipCreatedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questionId(): Bytes {
    let value = this.get("questionId");
    return value!.toBytes();
  }

  set questionId(value: Bytes) {
    this.set("questionId", Value.fromBytes(value));
  }

  get tipId(): Bytes {
    let value = this.get("tipId");
    return value!.toBytes();
  }

  set tipId(value: Bytes) {
    this.set("tipId", Value.fromBytes(value));
  }

  get createdBy(): string {
    let value = this.get("createdBy");
    return value!.toString();
  }

  set createdBy(value: string) {
    this.set("createdBy", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value!.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class TipValueClaimedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("questionId", Value.fromBytes(Bytes.empty()));
    this.set("tipId", Value.fromBytes(Bytes.empty()));
    this.set("createdBy", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TipValueClaimedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TipValueClaimedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TipValueClaimedEntity", id.toString(), this);
    }
  }

  static load(id: string): TipValueClaimedEntity | null {
    return changetype<TipValueClaimedEntity | null>(
      store.get("TipValueClaimedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questionId(): Bytes {
    let value = this.get("questionId");
    return value!.toBytes();
  }

  set questionId(value: Bytes) {
    this.set("questionId", Value.fromBytes(value));
  }

  get tipId(): Bytes {
    let value = this.get("tipId");
    return value!.toBytes();
  }

  set tipId(value: Bytes) {
    this.set("tipId", Value.fromBytes(value));
  }

  get createdBy(): string {
    let value = this.get("createdBy");
    return value!.toString();
  }

  set createdBy(value: string) {
    this.set("createdBy", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class AmountReceivedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sender", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AmountReceivedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AmountReceivedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AmountReceivedEntity", id.toString(), this);
    }
  }

  static load(id: string): AmountReceivedEntity | null {
    return changetype<AmountReceivedEntity | null>(
      store.get("AmountReceivedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class BlockedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sender", Value.fromString(""));
    this.set("receiver", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BlockedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BlockedEntity", id.toString(), this);
    }
  }

  static load(id: string): BlockedEntity | null {
    return changetype<BlockedEntity | null>(store.get("BlockedEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get receiver(): string {
    let value = this.get("receiver");
    return value!.toString();
  }

  set receiver(value: string) {
    this.set("receiver", Value.fromString(value));
  }
}
